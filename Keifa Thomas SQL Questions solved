Question 1: Write SQL queries for the following: Create a table with top 5 cards for each day based on the amount spent

CREATE TABLE Top5Card AS
SELECT CardNumber, TransactionId, TransactionAmount, Date
FROM (
    SELECT CardNumber, TransactionId, TransactionAmount, Date,
        ROW_NUMBER() OVER (PARTITION BY Date ORDER BY TransactionAmount DESC) AS RowNum
    FROM Table_1
) ranked_transactions
WHERE RowNum <= 5;

Top 5 cards for on the amount spent
WITH Card_Amounts AS (
SELECT CardNumber, 
           SUM(TransactionAmount) AS TotalAmount,
           RANK() OVER (ORDER BY SUM(TransactionAmount) DESC) AS Rank
  FROM Table_1
    GROUP BY CardNumber
)
SELECT CardNumber, TotalAmountSpent
FROM Card_Amounts
WHERE Rank <= 5;


Top cards on ‘16-09-2018’
          WITH ranked_transactions AS (
    SELECT 
        CardNumber, 
        TransactionAmount,
        ROW_NUMBER() OVER (PARTITION BY CardNumber ORDER BY TransactionAmount DESC) AS row_num
    FROM transactions
    WHERE Date = '2018-09-16'
)
SELECT CardNumber, TransactionAmount
FROM ranked_transactions
WHERE row_num = 1;

3.	Top 5 cards for each day based on the amount spent
WITH RankedTransactions AS (
    SELECT
        CardNumber, Date, TransactionAmount,
        ROW_NUMBER() OVER (PARTITION BY Date ORDER BY TransactionAmount DESC) AS RowNum
    FROM transactions
)
SELECT
    CardNumber, Date, TransactionAmount
FROM  RankedTransactions
WHERE RowNum <= 5
ORDER BY  Date,TransactionAmount DESC;



Question 5: Consider the below table:
ord_no	purch_amt	ord_date	customer_id	salesman_id
70001	150.5	05-10-2012	3005	5002
70009	270.65	10-09-2012	3001	5005
70002	65.26	05-10-2012	3002	5001
70004	110.5	17-08-2012	3009	5003
70007	948.5	10-09-2012	3005	5002
70005	2400.6	27-07-2012	3007	5001
70008	5760	10-09-2012	3002	5001
70010	1983.43	10-10-2012	3004	5006
70003	2480.4	10-10-2012	3009	5003
70012	250.45	27-06-2012	3008	5002
70011	75.29	17-08-2012	3003	5007
70013	3045.6	25-04-2012	3002	5001

1.	Find out the number of orders booked and their total purchased amount for each day. The output should be in the below format:
a.	"For 2001-10-10 there are 15 orders and total amount is Rs.100"
SELECT ord_date,
       COUNT(ord_no) AS num_orders,
       CONCAT('For ', ord_date, ' there are ', COUNT(ord_no), ' orders and total amount is Rs.', SUM(purch_amt)) AS output
FROM Orders
GROUP BY ord_date;

2.	Find the total purchase amount at a customer salesman level and rank the salesmen based on the total sales done
SELECT 
    salesman_id, SUM(purch_amt) AS total_sales,
    RANK() OVER (ORDER BY SUM(purch_amt) DESC) AS sales_rank
FROM 
    Orders
GROUP BY 
    salesman_id;
3.	Find the orders with all the field in such a manner that, the oldest order date will come first and the highest purchase amount of same day will come first

SELECT * FROM Orders
ORDER BY ord_date ASC, purch_amt DESC;

Question 1: Write a SQL query to convert Table T1 into Table T2

T1					T2		
CUST_ID	Metric	Value			CUST_ID	Sales	Units
A	   Sales	10			            A	10	2
A	   Units	2		                B	15	5
B	   Sales	15			            C	14	4
B	   Units	5			              D	12	7
C	   Sales	14					
C	   Units	4					
D	   Sales	12					
D	   Units	7					

SELECT 
    CUST_ID,
    MAX(CASE WHEN Metric = 'Sales' THEN Value END) AS Sales,
    MAX(CASE WHEN Metric = 'Units' THEN Value END) AS Units
FROM T1
GROUP BY CUST_ID;


Question 2: Write a query to find cumulative sum of amount for every customer, without using windowing function
SELECT 
    t1.Cust_ID, t1.Date, SUM(t2.Amount) AS Cumulative
FROM table_1 t1
JOIN 
    Table_1 t2 ON t1.Cust_ID = t2.Cust_ID AND t1.Date >= t2.Date
GROUP BY 
    t1.Cust_ID, t1.Date
ORDER BY 
    t1.Cust_ID, t1.Date;

